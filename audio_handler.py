import speech_recognition as sr
import pyttsx3
import threading
import time
from config import *

class AudioHandler:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()

        # Inicializar TTS
        self.tts_engine = pyttsx3.init()
        self.tts_engine.setProperty('rate', TTS_VOICE_RATE)
        self.tts_engine.setProperty('volume', TTS_VOICE_VOLUME)

        # Configurar voz espa√±ola
        self._setup_spanish_voice()

        # Estado
        self.is_listening = False
        self.is_speaking = False

        # Calibrar microfono
        self._calibrate_microphone()

    def _setup_spanish_voice(self):
        """Configura la voz 97 M√≥nica (espa√±ol Espa√±a)"""
        voices = self.tts_engine.getProperty('voices')

        # Buscar espec√≠ficamente la voz M√≥nica por ID o nombre
        monica_voice = None

        print(f"üîç Buscando voz M√≥nica (ID: {TTS_VOICE_ID if 'TTS_VOICE_ID' in globals() else '97'})...")

        # M√©todo 1: Buscar por ID espec√≠fico
        if hasattr(self, 'TTS_VOICE_ID') or 'TTS_VOICE_ID' in globals():
            voice_id = globals().get('TTS_VOICE_ID', 97)
            if len(voices) > voice_id:
                monica_voice = voices[voice_id].id
                print(f"üé§ Encontrada voz por ID {voice_id}: {voices[voice_id].name}")

        # M√©todo 2: Buscar por nombre exacto "Monica" o "M√≥nica"
        if not monica_voice:
            for voice in voices:
                if any(name in voice.name for name in ["Monica", "M√≥nica"]):
                    monica_voice = voice.id
                    print(f"üé§ Encontrada voz M√≥nica: {voice.name}")
                    break

        # M√©todo 3: Buscar por patrones espec√≠ficos de espa√±ol Espa√±a
        if not monica_voice:
            preferred_patterns = [
                "es_ES",
                "Spanish (Spain)",
                "Espa√±ol (Espa√±a)",
                "com.apple.ttsbundle.Monica-compact",
                "com.apple.voice.compact.es-ES.Monica"
            ]

            for pattern in preferred_patterns:
                for voice in voices:
                    if pattern in voice.id or pattern in voice.name:
                        monica_voice = voice.id
                        print(f"üé§ Encontrada voz espa√±ola por patr√≥n '{pattern}': {voice.name}")
                        break
                if monica_voice:
                    break

        # Aplicar la voz si se encontr√≥
        if monica_voice:
            try:
                self.tts_engine.setProperty('voice', monica_voice)
                print("‚úÖ Voz M√≥nica configurada correctamente")
            except Exception as e:
                print(f"‚ö†Ô∏è  Error configurando voz M√≥nica: {e}")
                print("   Usando voz por defecto")
        else:
            print("‚ùå No se encontr√≥ la voz M√≥nica")
            print("   Voces disponibles:")
            for i, voice in enumerate(voices[:10]):  # Mostrar solo las primeras 10
                print(f"     {i}: {voice.name} ({voice.id})")
            print("   ...")
            print("   Para instalar m√°s voces: Configuraci√≥n > Accesibilidad > Contenido Hablado")

    def _calibrate_microphone(self):
        """Calibra el micr√≥fono para ruido ambiente"""
        print("üé§ Calibrando micr√≥fono... Mant√©n silencio por 2 segundos.")
        with self.microphone as source:
            self.recognizer.adjust_for_ambient_noise(source, duration=2)
        print("‚úÖ Micr√≥fono calibrado.")

    def listen_for_wake_word(self, wake_word="robot"):
        """Escucha continuamente por la palabra de activaci√≥n"""
        print(f"üëÇ Escuchando palabra de activaci√≥n: '{wake_word}'...")

        while True:
            try:
                with self.microphone as source:
                    # Escuchar con timeout corto para no bloquear
                    audio = self.recognizer.listen(source, timeout=1, phrase_time_limit=3)

                # Reconocer usando whisper local o Google
                try:
                    text = self.recognizer.recognize_google(audio, language="es-ES").lower()
                    if wake_word.lower() in text:
                        print(f"üî• Palabra de activaci√≥n detectada: {text}")
                        return True

                except sr.UnknownValueError:
                    continue
                except sr.RequestError:
                    print("‚ùå Error con el servicio de reconocimiento")
                    time.sleep(1)

            except sr.WaitTimeoutError:
                continue
            except KeyboardInterrupt:
                break

        return False

    def listen_for_command(self, timeout=5):
        """Escucha un comando del usuario"""
        self.is_listening = True
        print("üëÇ Escuchando comando...")

        try:
            with self.microphone as source:
                audio = self.recognizer.listen(source, timeout=timeout, phrase_time_limit=10)

            # Usar Google Speech Recognition (puedes cambiarlo por Whisper)
            text = self.recognizer.recognize_google(audio, language="es-ES")
            print(f"üìù Escuchado: {text}")
            self.is_listening = False
            return text.lower()

        except sr.WaitTimeoutError:
            print("‚è∞ Timeout - no se detect√≥ audio")
        except sr.UnknownValueError:
            print("‚ùì No se pudo entender el audio")
        except sr.RequestError as e:
            print(f"‚ùå Error del servicio de reconocimiento: {e}")

        self.is_listening = False
        return None

    def speak(self, text, blocking=False):
        """Convierte texto a voz"""
        if self.is_speaking:
            return

        def _speak():
            self.is_speaking = True
            print(f"ü§ñ mBot dice: {text}")
            self.tts_engine.say(text)
            self.tts_engine.runAndWait()
            self.is_speaking = False

        if blocking:
            _speak()
        else:
            threading.Thread(target=_speak, daemon=True).start()

    def is_currently_speaking(self):
        """Verifica si est√° hablando actualmente"""
        return self.is_speaking

    def is_currently_listening(self):
        """Verifica si est√° escuchando actualmente"""
        return self.is_listening

    def stop_speaking(self):
        """Detiene el TTS"""
        self.tts_engine.stop()
        self.is_speaking = False

if __name__ == "__main__":
    # Test del sistema de audio
    audio = AudioHandler()

    print("üß™ Probando sistema de audio...")
    audio.speak("Hola, soy tu robot mBot. Estoy probando mi voz.", blocking=True)

    print("üé§ Di algo...")
    command = audio.listen_for_command()
    if command:
        audio.speak(f"Escuch√©: {command}")
