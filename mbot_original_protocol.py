#!/usr/bin/env python3
"""
mBot BLE usando EXACTAMENTE los mismos comandos que la librer√≠a original
"""

import signal
import sys
import asyncio
import struct
from time import sleep
import threading
import serial
import serial.tools.list_ports

try:
    from bleak import BleakScanner, BleakClient
    BLUETOOTH_AVAILABLE = True
except ImportError:
    BLUETOOTH_AVAILABLE = False

class MBotOriginalProtocol:
    def __init__(self, connection_type="auto"):
        """
        mBot usando EXACTAMENTE el protocolo original
        """
        signal.signal(signal.SIGINT, self.exit)
        self.exiting = False
        self.connection_type = None
        self.serial = None
        
        # BLE attributes
        self.ble_client = None
        self.ble_device = None
        self.ble_write_char = "0000ffe3-0000-1000-8000-00805f9b34fb"
        self.ble_connected = False
        self.ble_thread = None
        self.ble_loop = None

        print(f"ü§ñ Iniciando mBot con protocolo ORIGINAL (modo: {connection_type})")
        
        # Conectar
        if connection_type == "auto":
            if self._try_bluetooth_connection():
                pass
            elif self._try_usb_connection():
                pass
            else:
                raise Exception("No se pudo conectar al mBot")
        elif connection_type == "bluetooth":
            if not self._try_bluetooth_connection():
                raise Exception("No se pudo conectar por Bluetooth")
        elif connection_type == "usb":
            if not self._try_usb_connection():
                raise Exception("No se pudo conectar por USB")

    def _try_bluetooth_connection(self):
        """Conecta por BLE"""
        if not BLUETOOTH_AVAILABLE:
            print("üîµ Bluetooth LE no disponible")
            return False

        try:
            print("üîµ Iniciando conexi√≥n Bluetooth LE...")
            
            self.ble_thread = threading.Thread(target=self._run_ble_connection, daemon=True)
            self.ble_thread.start()
            
            # Esperar conexi√≥n
            for _ in range(30):
                if self.ble_connected:
                    self.connection_type = "bluetooth"
                    print("‚úÖ mBot conectado por Bluetooth LE")
                    return True
                sleep(0.5)
            
            print("üîµ Timeout en conexi√≥n Bluetooth LE")
            return False
            
        except Exception as e:
            print(f"üîµ Error en conexi√≥n BLE: {e}")
            return False

    def _run_ble_connection(self):
        """Thread para BLE"""
        try:
            self.ble_loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.ble_loop)
            self.ble_loop.run_until_complete(self._async_connect())
        except Exception as e:
            print(f"üîµ Error en thread BLE: {e}")

    async def _async_connect(self):
        """Conexi√≥n BLE as√≠ncrona"""
        try:
            # Buscar mBot
            devices = await BleakScanner.discover(timeout=10.0)
            device = None
            
            for d in devices:
                name = d.name or ""
                if 'makeblock' in name.lower() or 'mbot' in name.lower():
                    device = d
                    break
            
            if not device:
                print("üîµ No se encontr√≥ mBot BLE")
                return
            
            print(f"üîµ Conectando a {device.name}...")
            
            # Conectar
            self.ble_client = BleakClient(device.address)
            await self.ble_client.connect()
            
            if not self.ble_client.is_connected:
                return
            
            self.ble_device = device
            self.ble_connected = True
            
            # Mantener conexi√≥n
            while self.ble_connected and not self.exiting:
                await asyncio.sleep(0.1)
                
        except Exception as e:
            print(f"üîµ Error en conexi√≥n: {e}")

    def _try_usb_connection(self):
        """Conecta por USB usando el m√©todo original"""
        try:
            print("üîå Buscando mBot por USB...")
            port = self._find_mbot_usb_port()
            
            if not port:
                return False
            
            self.serial = serial.Serial(port, 115200, timeout=1)
            self.connection_type = "usb"
            print(f"‚úÖ mBot conectado por USB ({port})")
            sleep(2)
            return True
            
        except Exception as e:
            print(f"üîå Error USB: {e}")
            return False

    def _find_mbot_usb_port(self):
        """Busca puerto USB - M√âTODO ORIGINAL"""
        ports = serial.tools.list_ports.comports()
        for port in ports:
            if "USB" in port.description or "CH340" in port.description:
                return port.device
        return None

    def __writePackage(self, pack):
        """M√©todo de escritura ORIGINAL"""
        if self.connection_type == "usb" and self.serial:
            self.serial.write(pack)
            self.serial.flush()
            sleep(0.01)
            return True
                
        elif self.connection_type == "bluetooth" and self.ble_connected:
            try:
                future = asyncio.run_coroutine_threadsafe(
                    self._async_write(pack), 
                    self.ble_loop
                )
                result = future.result(timeout=2.0)
                sleep(0.01)  # Mismo delay que USB
                return result
            except:
                return False
        return False

    async def _async_write(self, data):
        """Escritura BLE as√≠ncrona"""
        try:
            if self.ble_client and self.ble_client.is_connected:
                await self.ble_client.write_gatt_char(self.ble_write_char, data)
                return True
            return False
        except:
            return False

    def short2bytes(self, sval):
        """Conversi√≥n ORIGINAL de short a bytes"""
        val = struct.pack("h", sval)
        return [val[i] for i in range(2)]

    def float2bytes(self, fval):
        """Conversi√≥n ORIGINAL de float a bytes"""
        val = struct.pack("f", fval)
        return [val[i] for i in range(4)]

    # M√âTODOS ORIGINALES EXACTOS
    def doMove(self, leftSpeed, rightSpeed):
        """M√âTODO ORIGINAL - Usar velocidades con signo correcto"""
        self.__writePackage(bytearray([0xff, 0x55, 0x7, 0x0, 0x2, 0x5] + self.short2bytes(-leftSpeed) + self.short2bytes(rightSpeed)))

    def doRGBLedOnBoard(self, index, red, green, blue):
        """M√âTODO ORIGINAL"""
        self.__writePackage(bytearray([0xff, 0x55, 0x9, 0x0, 0x2, 0x8, 0x7, 0x2, index, red, green, blue]))

    def doRGBLed(self, port, slot, index, red, green, blue):
        """M√âTODO ORIGINAL"""
        self.__writePackage(bytearray([0xff, 0x55, 0x9, 0x0, 0x2, 0x8, port, slot, index, red, green, blue]))

    def doBuzzer(self, buzzer, time=0):
        """M√âTODO ORIGINAL"""
        self.__writePackage(bytearray([0xff, 0x55, 0x7, 0x0, 0x2, 0x22] + self.short2bytes(buzzer) + self.short2bytes(time)))

    def doMotor(self, port, speed):
        """M√âTODO ORIGINAL"""
        self.__writePackage(bytearray([0xff, 0x55, 0x6, 0x0, 0x2, 0xa, port]+self.short2bytes(speed)))

    def doServo(self, port, slot, angle):
        """M√âTODO ORIGINAL"""
        self.__writePackage(bytearray([0xff, 0x55, 0x6, 0x0, 0x2, 0xb, port, slot, angle]))

    def close(self):
        """Cierra conexi√≥n"""
        self.exiting = True
        
        if self.connection_type == "bluetooth":
            self.ble_connected = False
            if self.ble_client and self.ble_loop:
                try:
                    future = asyncio.run_coroutine_threadsafe(
                        self.ble_client.disconnect(),
                        self.ble_loop
                    )
                    future.result(timeout=2.0)
                except:
                    pass
                    
        elif self.connection_type == "usb" and self.serial:
            try:
                self.serial.close()
            except:
                pass
                
        print("üîå Conexi√≥n cerrada")

    def exit(self, signal, frame):
        print("\nüõë Cerrando...")
        self.close()
        sys.exit(0)

def test_original_protocol():
    """Test con protocolo original exacto"""
    print("üß™ PROBANDO PROTOCOLO ORIGINAL EXACTO")
    print("=" * 50)
    
    try:
        # Conectar
        mbot = MBotOriginalProtocol(connection_type="auto")
        
        print(f"\n‚úÖ Conectado por: {mbot.connection_type}")
        
        print("\n1Ô∏è‚É£ PROBANDO COMANDO MOVE ORIGINAL...")
        print("   Adelante con protocolo original...")
        mbot.doMove(100, 100)  # Esto deber√≠a ser: -100 (izq) y 100 (der) como 2 bytes cada uno
        sleep(1)
        
        print("   STOP con protocolo original...")
        mbot.doMove(0, 0)  # Esto deber√≠a ser: 0 y 0 como 2 bytes cada uno
        sleep(1)
        
        print("\n2Ô∏è‚É£ PROBANDO LED ORIGINAL...")
        mbot.doRGBLedOnBoard(0, 255, 0, 0)  # Rojo
        sleep(1)
        mbot.doRGBLedOnBoard(0, 0, 0, 0)   # Apagar
        
        print("\n3Ô∏è‚É£ PROBANDO BUZZER ORIGINAL...")
        mbot.doBuzzer(440, 500)  # 440Hz por 500ms como 2 bytes cada uno
        sleep(1)
        
        print("\n4Ô∏è‚É£ PROBANDO GIRO...")
        print("   Giro izquierda...")
        mbot.doMove(100, -100)  # Deber√≠a ser: -100 (izq) y -100 (der)
        sleep(1)
        
        print("   STOP final...")
        mbot.doMove(0, 0)
        
        print("\n‚úÖ TEST PROTOCOLO ORIGINAL COMPLETADO")
        print("¬øSe detuvo correctamente esta vez?")
        
        mbot.close()
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üî¨ TEST DEL PROTOCOLO ORIGINAL EXACTO")
    print("=" * 60)
    print("Este test usa EXACTAMENTE los mismos comandos que la librer√≠a original")
    print("La diferencia clave: velocidades como 2 bytes (short) en lugar de 1 byte")
    print()
    input("Presiona Enter para probar...")
    
    test_original_protocol()
